INFRASTRUCTURE: RESOURCES USED TO RUN OUR APPLICATION ON CLOUD.
EX: SERVER, VPC, ELB, S3, ASG ETC-------

CLOUD -- > AWS --- > MANUALLY 

LIMITATIONS:
1. Its time consuming.
2. It will have chance of doing mistakes.
3. Delaying the activites.

AUTOMATION WAYS:
1. CFT -- > CLOUDFORMATION TEMPLATE (JSON/YAML)
2. ARM -- > AZURE RESOURCE MANAGER
3. GDE -- > GOOGLE DEPLOY ENGINE

2014 -- > MITCHELL HASIMOTO -- > TERRAFORM

TERRAFORM -- > AWS, GCP, AZURE,

TERRAFORM USES HCL (HASIHICORP CONFIGURATION LANGUAGE) 
CONFIGURATION FILE: the files which have the resource information
ex: .tf files

terraform -- > servers < --- configure & deploy by ansible

aws configure 

mkdir terraform
cd terraform

INSTALLATION:

sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo

BLOCKS:
1. PROVIDER REGION
2. RESOURCE CONFIGURATION
3. VARIABLE DECLARATION

terraform init	: to initalize the provider plugins.
terraform plan	: to create the execution plan
terraform apply	: to create the resources
terraform destroy: to delete the resource


statefile: it will store the resource infromation which is created by terraform only.
terraform state list : to list the resources created by terraform.

target: it is used to delete one specific resource

terraform destroy -target="aws_instance.one[2]"


code:

provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "one" {
count = 5
ami = "ami-053b0d53c279acc90"
instance_type = "t2.micro"
tags = {
Name = "raham-terraform"
}
}


TARGET: To apply action for particular resource only.
terraform destroy -target="aws_instance.one[0]"
terraform destroy -target="aws_instance.one[3]" -target="aws_instance.one[4]"

TERRAFORM OUTPUTS: Its to show the output of specific objects.

provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "one" {
ami = "ami-053b0d53c279acc90"
instance_type = "t2.micro"
tags = {
Name = "raham-terraform"
}
}

output "raham" {
value = [aws_instance.one.public_ip, aws_instance.one.private_ip, aws_instance.one.public_dns]
}

TERRAFORM UPDATE: we can change the values of existing resource.

write terraform code -- > apply -- > change values -- > apply 


VARIBALES: Used to store the values 
and the values are going to chnage as per time.
this block is used to chnage the vlaues frequently.

TYPE-1: STRING

provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "one" {
ami = "ami-053b0d53c279acc90"
instance_type = var.instance_type
tags = {
Name = "raham-terraform01"
}
}

variable "instance_type" {
description = "*"
type = string
default = "t2.micro"
}

TYPE-2: NUMBER

provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "one" {
count = var.instance_count
ami = "ami-053b0d53c279acc90"
instance_type = var.instance_type
tags = {
Name = "raham-terraform01"
}
}

variable "instance_type" {
description = "*"
type = string
default = "t2.micro"
}

variable "instance_count" {
description = "*"
type = number
default = 3
}

VARIABLE FILES: it will have only variable blocks inside the file.

vim main.tf

provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "one" {
count = var.instance_count
ami = "ami-053b0d53c279acc90"
instance_type = var.instance_type
tags = {
Name = "raham-terraform01"
}
}

vim variable.tf

variable "instance_type" {
description = "*"
type = string
default = "t2.micro"
}

variable "instance_count" {
description = "*"
type = number
default = 3
}

HISTORY:

   1  aws configure
    2  mkdir terraform
    3  cd terraform/
    4  sudo yum install -y yum-utils
    5  sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    6  sudo yum -y install terraform
    7  vim main.tf
    8  ll
    9  terraform init
   10  ll
   11  ls -al
   12  terraform plan
   13  terraform apply
   14  ll
   15  vim terraform.tfstate
   16  terraform state list
   17  terraform destroy
   18  vim terraform.tfstate
   19  vim main.tf
   20  terraform plan
   21  terraform apply
   22  terraform state list
   23  terraform destroy -target="aws_instance.one[0]"
   24  terraform state list
   25  terraform destroy -target="aws_instance.one[3]" -target="aws_instance.one[4]"
   26  terraform state list
   27  terraform destroy --auto-approve
   28  vim main.tf
   29  terraform apply --auto-approve
   30  vim main.tf
   31  terraform apply --auto-approve
   32  vim main.tf
   33  terraform state list
   34  cat main.tf
   35  terraform apply --auto-approve
   36  vim main.tf
   37  terraform apply --auto-approve
   38  vim main.tf
   39  terraform apply --auto-approve
   40  terraform destroy --auto-approve
   41  vim main.tf
   42  terraform plan
   43  terraform apply --auto-approve
   44  terraform destroy --auto-approve
   45  vim main.tf
   46  terraform apply --auto-approve
   47  terraform state list
   48  terraform destroy --auto-approve
   49  vim main.tf
   50  cat main.tf
   51  vim variable.tf
   52  ll
   53  terraform apply --auto-approve
   54  history
