MONOLITHIC    : Single server multiple services single DB.
MICRO SERVICE : Multiple servers Multiple services with multiple DB's

how to select the architecture: Based on application and its services.

in Micro services we dont use servers, we use Containers.


Container: is a Virtual Machine without OS.
Docker: its a tool used to create Container.
Image: consist of os & packages which are already installed.

server = Vm = conatiner

Docker: 

It is an open source centralized platform designed to create, deploy and run applications.
Docker is written in the Go language.
Docker creates containers on host O.S to run applications. (computer/server os)
We can install Docker on any O.S but the docker engine runs natively on Linux distribution.
It allows applications to use the same Linux kernel as a system on the host computer, rather than creating a whole virtual O.S.
Before Docker Docker performs O.S level Virtualization also known as Containerization.
process of packing application along with its dependencies.
many users face problems that a particular code is running in the developerâ€™s system but not in the user system.
It was initially released in March 2013, and developed by Solomon Hykes and Sebastian Pahl.
Docker is a set of platform-as-a-service that use O.S level Virtualization, where as VM ware uses Hardware level Virtualization.
Container have O.S files but its negligible in size compared to original files of that O.S.
=====================
how to open again container in docker
docker exec -it hemanth1 /bin/bash


COMPONENTS:

CLIENT: It takes the commands and executes with communication docker daemon
HOST: The place where you installed docker.
DAEMON: Deals with docker componets(images, containers, volumes ----). it is inside docker host.
REGISTRY: It stores all the Images.

============================================

DAY-02:
Installation:
yum install docker -y
systemctl restart docker.service
systemctl status docker.service
docker version

DOCKER COMMANDS:

docker pull ubuntu: to get ubuntu image from registry
docker images : to list the images 
docker run ubuntu : to create a conatiners
docker ps -a  : to list all the containers
docker ps : to list running containers only
docker run --name raham1 ubuntu : to give the name for container
docker run -it --name raham2 ubuntu : to go inside of a container
(it = interactive terminal, will go inside container, -d means detach mode will not go inside the container)
cat /etc/os-release : to see the flavour of linux
docker inspect cont-name : to see the full infromation of a container.
docker attach cont-name : to go inside the container.


inside container: note: in ubuntu pkg manager is apt (advance package tool)
apt update -y
apt install maven -y
apt install mysql-server -y
mkdir raham & touch abc.txt
raham2 (cont) -- > install maven,mysql db & files -- > image form container -- > image

os level of virtualization --- > content inside the os will be on image now

ctrl p q : to exit from container

docker commit raham2 swiggy:v1     : to create image from container

====================================================================================

DOCKER FILE: 
It is an automated method to create docker images.
in docker file D must be captial.
in single folder we need to have only one docker file.
docker file will have some componets inside it.
each component is on CAPITAL letter.

write Docker file -- > Build -- > Image

docker build -t image-name .

FROM : Used for base image
RUN  : Used to execute commands (During image creation)
CMD  : Used to execute commands (During Container creation)
COPY : used to copy local files to container
ADD : used to files on internet to container & used for exctraction of files.
WORKDIR : Takes you to the desried directory ( defaut / = /tmp)
LABEL : Used to attach labels to containers like email, author ----
ENV   : To pass environment variables (inside the containers)
args  : to pass value (outside of container)

EXAMPLE-1:

FROM ubuntu
RUN apt update -y
RUN apt install maven -y
RUN mkdir raham
RUN touch raham/abc.txt
================================================
EXAMPLE-2:
FROM ubuntu
RUN apt update -y
RUN apt install maven -y
RUN mkdir raham
RUN touch raham/abc.txt
COPY index.html /tmp
COPY apache-maven-3.6.3-bin.tar.gz /tmp
ADD https://dlcdn.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz /opt
=======================================================
EXAMPLE-3:
FROM ubuntu
RUN apt update -y
RUN apt install maven -y
RUN mkdir raham
RUN touch raham/abc.txt
WORKDIR /tmp
==========================
EXAMPLE-4:
FROM ubuntu
RUN apt update -y
RUN apt install maven -y
RUN mkdir raham
RUN touch raham/abc.txt
LABEL user raham
ENV client swiggy

HISTORY:

    1  yum install docker -y
    2  systemctl restart docker.service
    3  systemctl status docker.service
    4  docker -v
    5  docker version
    6  docker pull ubuntu
    7  docker images
    8  docker run ubuntu
    9  docker ps -a
   10  docker run --name raham1 ubuntu
   11  docker ps -a
   12  docker run -it --name raham2 ubuntu
   13  docker ps -a
   14  docker ps
   15  docker commit raham2 swiggy:v1
   16  docker images
   17  docker run -it --name raham3 swiggy:v1
   18  ll
   19  vim Dockerfile
   20  docker build -t swiggy:v2 .
   21  cat Dockerfile
   22  docker images
   23  docker ps -a
   24  docker run -it --name raham4 swiggy:v1 /bin/bash
   25  docker run -it --name raham5 swiggy:v2 /bin/bash
   26  vim Dockerfile
   27  docker build -t swiggy:v2 .
   28  docker run -it --name raham6 swiggy:v2 /bin/bash
   29  docker run -it --name raham7 swiggy:v2
   30  mysql --version
   31  vim index.html
   32  ll
   33  vim Dockerfile
   34  wget https://dlcdn.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
   35  ll
   36  vim Dockerfile
   37  docker build -t swiggy:v3 .
   38  ll
   39  vim Dockerfile
   40  docker build -t swiggy:v3 .
   41  docker run -it --name raham8 swiggy:v3
   42  docker ps -a
   43  docker start raham8
   44  docker ps -a
   45  vim Dockerfile
   46  docker run -it --name raham8 swiggy:v3
   47  docker build -t swiggy:v3 .
   48  docker run -it --name raham9 swiggy:v3
   49  vim Dockerfile
   50  docker build -t swiggy:v3 .
   51  docker run -it --name raham10 swiggy:v1
   52  docker run -it --name raham11 swiggy:v3
   53  vim Dockerfile
   54  docker build -t swiggy:v3 .
   55  docker images
   56  docker ps -a
   57  docker inspect raham11
   58  docker run -itd --name raham12 swiggy:v3
   59  dockr ps -a
   60  dockrr ps -a
   61  docker ps -a
   62  docker inspect raham12
   63  docker inspect raham12 | grep -i label
   64  docker inspect raham12 | grep -i labels
   65  docker inspect raham12 | grep -i raham
   66  vim Dockerfile
   67  docker build -t swiggy:v3 .
   68  docker run -itd --name raham13 swiggy:v3
   69  docker ps -a
   70  docker attach raham13
   71  docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag
   72  docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:8.0.33
   73  docker ps -a
   74  history



DAY-02:

DOCKER CLINET: Takes input from the user and executes the command. it will connect with the daemon.
DOCKER HOST: Where we installed docker (windows, Linux and macOS)
DOCKER DAEMON: It will manage docker components (Image, Container, volumes ----)
DOCKER REGISTRY: It will have all images for docker.


DOCKER IMAGE will consist of OS, SOFTWARES & Packages.


docker images: to check the images list
docker pull ubuntu: it will pull the ubuntu image from the docker registry.
docker run ubuntu: to run a container
docker container ls : to list the containers (docker ps)
docker container ls -a : to list all the containers (docker ps -a)
docker run --name cont1 amazonlinux 

-it : interactive terminal -- > to go inside a container

docker run -it --name cont2 amazonlinux 
install some packages
ctrl p q: to come out of a container

docker commit cont2 zomato:v1



DOCKER FILE: is used to create an image automatically
here we use COMPONENTS which starts with capital letter.
in Docker file D is capital. if it is not capital it wont work.
we can reuse the Dockerfile.

FROM	: Used for Base image
RUN 	: Used to run linux commands During image creation.
CMD 	: Used to run linux commands During container creation.
ENTRYPOINT: More priority than CMD, it will override the CMD.
COPY	: Used to copy local files to container
ADD	: Used to copy internet files to container
WORKDIR : used to go inside a specific folder
ENV	: used to give env variables inside container
ARGS	: used to give  variables outside container
LABEL	: Used to give labels for containers

docker inspect cont12	: gives complete information about container 12

HISTORY:

 83  yum install docker -y
   84  docker --version
   85  docker -v
   86  docker version
   87  systemctl start docker
   88  systemctl status docker
   89  docker version
   90  docker images
   91  docker pull amazonlinux
   92  docker images
   93  df -h
   94  docker run amazonlinux
   95  docker container ls
   96  docker container ls -a
   97  docker run --name cont1 amazonlinux
   98  docker container ls -a
   99  docker run -it --name cont2 amazonlinux
  100  docker container ls
  101  docker container ls -a
  102  docker ps
  103  docker ps -a
  104  docker ps
  105  docker attach cont2
  106  docker ps
  107  docker images
  108  docker commit cont2 zomato:v1
  109  docker images
  110  docker run -it --name cont3 zomato:v1
  111  docker ps
  112  vim Dockerfile
  113  docker images
  114  docker build -t zomato:v2
  115  docker build -t zomato:v2 .
  116  vim Dockerfile
  117  docker build -t zomato:v2 .
  118  dockre images
  119  docker images
  120  cat Dockerfile
  121  docker run -it --name cont4 zomato:v2
  122  vim Dockerfile
  123  docker build -t zomato:v3 .
  124  docker run -it --name cont6 zomato:v3
  125  vim Dockerfile
  126  docker build -t zomato:v3 .
  127  docker ps -a
  128  docker run -it --name cont7 zomato:v3
  129  docker ps -a
  130  ll
  131  cat file1
  132  ls
  133  cat file1
  134  vim Dockerfile
  135  docker build -t swiggy:v3 .
  136  docker run -it --name cont8 swiggy:v3
  137  vim Dockerfile
  138  docker build -t swiggy:v3 .
  139  docker run -it --name cont9 swiggy:v3
  140  vim Dockerfile
  141  docker build -t swiggy:v3 .
  142  docker run -it --name cont10 swiggy:v3
  143  vi Dockerfile
  144  docker build -t swiggy:v3 .
  145  docker run -it --name cont11 swiggy:v3
  146  vim Dockerfile
  147  docker build -t swiggy:v3 .
  148  docker run -it --name cont12 swiggy:v3
  149  docker inspect cont12
  150  history


==================================================

DAY-03:

1. DOCKER FILE

FROM ubuntu
VOLUME ["/volume1"]


docker build -t swiggy:v1 .
docker run -it --name cont1 swiggy:v1
cd /volume1
touch file{1..5}
exit

docker run -it --name cont2 --volumes-from cont1 --privileged=true ubuntu
cd /volume1
touch file{6..10}
exit

2. COMMAND
docker run -it --name cont4 -v volume2 ubuntu
cd /volume2
touch java{1..5}
exit

docker run -it --name cont5 --volumes-from cont4 --privileged=true ubuntu
cd /volume2

3. MOUNTING

docker run -it --name cont6 --mount source=volume3,destination=/volume3 ubuntu

docker volume ls		: to list the volumes
docker volume create volume3 	: to create volume
docker volume inspect volume3 	: to get complete info
cd /var/lib/docker/volumes/volume3/_data
docker volume prune		: to remove all unused volumes
docker volume rm volume6	: to remove a specifc volume

docker system commands:

docker system df	: to show size of docker components
docker system df -v	: to show size of docker components in complete way
docker system prune	: to all unused docker components

4. HOST -- > CONATINER

cd /home/ec2-user
touch php{1..5}
docker run -it --name cont9 -v /home/ec2-user:/hostvolume --privileged=true ubuntu


DEPLOYMENT:

vim Dockerfile
FROM ubuntu
RUN apt-get update -y
RUN apt-get install apache2 -y
COPY index.html /var/www/html/
CMD ["/usr/sbin/apachectl", "-D", "FOREGROUND"]

docker build -t rahamapp:v1 .
docker run -itd --name rahamappcont1 -p 81:80 rahamapp:v1

publcip:81

index.html

<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
body {font-family: Arial, Helvetica, sans-serif;}

/* Full-width input fields */
input[type=text], input[type=password] {
  width: 100%;
  padding: 12px 20px;
  margin: 8px 0;
  display: inline-block;
  border: 1px solid #ccc;
  box-sizing: border-box;
}

/* Set a style for all buttons */
button {
  background-color: #04AA6D;
  color: white;
  padding: 14px 20px;
  margin: 8px 0;
  border: none;
  cursor: pointer;
  width: 100%;
}

button:hover {
  opacity: 0.8;
}

/* Extra styles for the cancel button */
.cancelbtn {
  width: auto;
  padding: 10px 18px;
  background-color: #f44336;
}

/* Center the image and position the close button */
.imgcontainer {
  text-align: center;
  margin: 24px 0 12px 0;
  position: relative;
}

img.avatar {
  width: 40%;
  border-radius: 50%;
}

.container {
  padding: 16px;
}

span.psw {
  float: right;
  padding-top: 16px;
}

/* The Modal (background) */
.modal {
  display: none; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
  padding-top: 60px;
}

/* Modal Content/Box */
.modal-content {
  background-color: #fefefe;
  margin: 5% auto 15% auto; /* 5% from the top, 15% from the bottom and centered */
  border: 1px solid #888;
  width: 80%; /* Could be more or less, depending on screen size */
}

/* The Close Button (x) */
.close {
  position: absolute;
  right: 25px;
  top: 0;
  color: #000;
  font-size: 35px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: red;
  cursor: pointer;
}

/* Add Zoom Animation */
.animate {
  -webkit-animation: animatezoom 0.6s;
  animation: animatezoom 0.6s
}

@-webkit-keyframes animatezoom {
  from {-webkit-transform: scale(0)} 
  to {-webkit-transform: scale(1)}
}
  
@keyframes animatezoom {
  from {transform: scale(0)} 
  to {transform: scale(1)}
}

/* Change styles for span and cancel button on extra small screens */
@media screen and (max-width: 300px) {
  span.psw {
     display: block;
     float: none;
  }
  .cancelbtn {
     width: 100%;
  }
}
</style>
</head>
<body>

<h2>Modal Login Form</h2>

<button onclick="document.getElementById('id01').style.display='block'" style="width:auto;">Login</button>

<div id="id01" class="modal">
  
  <form class="modal-content animate" action="/action_page.php" method="post">
    <div class="imgcontainer">
      <span onclick="document.getElementById('id01').style.display='none'" class="close" title="Close Modal">&times;</span>
      <img src="img_avatar2.png" alt="Avatar" class="avatar">
    </div>

    <div class="container">
      <label for="uname"><b>Username</b></label>
      <input type="text" placeholder="Enter Username" name="uname" required>

      <label for="psw"><b>Password</b></label>
      <input type="password" placeholder="Enter Password" name="psw" required>
        
      <button type="submit">Login</button>
      <label>
        <input type="checkbox" checked="checked" name="remember"> Remember me
      </label>
    </div>

    <div class="container" style="background-color:#f1f1f1">
      <button type="button" onclick="document.getElementById('id01').style.display='none'" class="cancelbtn">Cancel</button>
      <span class="psw">Forgot <a href="#">password?</a></span>
    </div>
  </form>
</div>

<script>
// Get the modal
var modal = document.getElementById('id01');

// When the user clicks anywhere outside of the modal, close it
window.onclick = function(event) {
    if (event.target == modal) {
        modal.style.display = "none";
    }
}
</script>

</body>
</html>


 66  yum install docker -y
   67  systemctl start docker
   68  systemctl status docker
   69  vim Dockerfile
   70  docker build -t swiggy:v1
   71*
   72  docker images
   73  docker run -it --name cont1 swiggy:v1
   74  docker ps -a
   75  docker run -it --name cont2 --volumes-from cont1 --privileged=true ubuntu
   76  docker ps -a
   77  docker attach cont1
   78  docker run -it --name cont3 --volumes-from cont1 --privileged=true ubuntu
   79  cat Dockerfile
   80  docker ps
   81  dockerr images
   82  docker images
   83  docker run -it --name -v abcd cont4
   84  docker run -it --name -v abcd cont4 ubuntu
   85  docker ps
   86  docker run -it --name cont4 -v volume2 ubuntu
   87  docker run -it --name cont5 --volumes-from cont4 --privileged=true ubuntu
   88  docker volume ls
   89  docker volume create volume3
   90  docker volume ls
   91  docker volume inspect volume3
   92  cd /var/lib/docker/volumes/volume3/_data
   93  ll
   94  touch python{1..5}
   95  vim python1
   96  ll
   97  docker run -it --name cont6 --mount source=/volume3 dest=/volume3 ubuntu
   98  docker run -it --name cont6 --mount source=/volume3 destinatio=/volume3 ubuntu
   99  docker run -it --name cont6 --mount source=/volume3,destinatio=/volume3 ubuntu
  100  docker run -it --name cont6 --mount source=/volume3,destination=/volume3 ubuntu
  101  docker run -it --name cont6 --mount source=volume3,destination=/volume3 ubuntu
  102  ll
  103  docker attach cont6
  104  ll
  105  docker volume create volume4
  106  docker volume create volume5
  107  docker volume ls
  108  docker volume create volume6
  109  docker volume ls
  110  docker system
  111  docker system df
  112  docker system df -v
  113  docker system prune
  114  docker volume ls
  115  docker volume prune
  116  docker volume create volume6
  117  docker volume rm volume6
  118  docker volume ls
  119  docker volume rm volume3
  120  cd /home/ec2-user/
  121  ll
  122  ls -al
  123  touch php{1..5}
  124  ls -al
  125  docker run -it --name cont7 -v /home/ec2-user=/hostvolume ubuntu
  126  docker run -it --name cont7 -v /home/ec2-user=/hostvolume --privileged=true ubuntu
  127  docker run -it --name cont8 -v /home/ec2-user=/hostvolume --privileged=true ubuntu
  128  docker run -it --name cont9 -v /home/ec2-user:/hostvolume --privileged=true ubuntu
  129  docker volume ls
  130  docker run -it --name jenkinscont -p 8080:8080 jenkins/jenkins:lts
  131  docker ps
  132  docker ps -q
  133  docker ps -a
  134  docker ps -a -q
  135  docker stop $(docker ps -a -q)
  136  docker ps -a
  137  docker ps -a -a
  138  docker ps -a -q
  139  docker rm $(docker ps -a -q)
  140  docker ps -a
  141  cd
  142  vim Dockerfile
  143  ll
  144  rm -rf file*
  145  ll
  146  vim index.html
  147  docker build -t rahamapp:v1 .
  148  docker run -itd --name rahamappcont1 -p 81:80 rahamapp:v1
  149  docker ps
  150  docker run -itd --name rahamappcont1 -p 82:80 rahamapp:v1
  151  docker run -itd --name rahamappcont2 -p 83:80 rahamapp:v1

================================================================================================================================================

DAY-04:


INSTALL:

sudo curl -L "https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
ls /usr/local/bin/
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose version

create images:


docker-compose.yml
version: '3'
services:
  movies:
    image: paymovies:v1
    ports:
      - "8000:80"
    volumes:
      - "moviesvolume"
  train:
    image: paytrain:v1
    ports:
      - "8001:80"
    volumes:
      - "trainvolume"
  rechatge:
    image: payrecharge:v1
    ports:
      - "8002:80"
    volumes:
      - "rechargevolume"

docker-compose up -d
docker ps 
access it from port numbers

docker-compose down 	: to stop and remove the containers
docker-compose images	: to show images used by docker compose only
docker-compose ps	: to show the containers created by docker compose only
docker-compose stop	: to stop the containers created by docker compose only
docker-compose start	: to start the containers created by docker compose only
docker-compose pause	: to pause the containers created by docker compose only
docker-compose unpause	: to unpause the containers created by docker compose only
docker-compose logs	: to show the logs created by docker compose only


working with custom file:

mv docker-compose rahamcompose.yml 
docker-compose -f rahamcompose.yml up -d


DOCKER HUB: To store the images on the centrol repo.

https://hub.docker.com/signup

 69  docker version
   70  systemctl start docker
   71  systemctl status docker
   72  sudo curl -L "https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
   73  ls /usr/local/bin/
   74  sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
   75  sudo chmod +x /usr/local/bin/docker-compose
   76  docker-compose version
   77  vim Dockerfile
   78  vim index.html
   79  docker build -t paymovies:v1 .
   80  docker images
   81  vim index.html
   82  docker build -t paytrain:v1 .
   83  docker images
   84  vim docker-compose.yml
   85  cat docker-compose.yml
   86  docker ps -a
   87  docker-compose up -d
   88  vim docker-compose.yml
   89  docker-compose up -d
   90  docker ps -a
   91  vim index.html
   92  docker build -t payrecharge:v1 .
   93  docker images
   94  vim docker-compose.yml
   95  docker-compose up -d
   96  docker ps
   97  ll
   98  docker-compose down
   99  docker ps
  100  cat docker-compose.yml
  101  docker-compose up -d
  102  docker ps
  103  docker images
  104  docker pull nginx
  105  docker pull jenkins/jenkins:lts
  106  docker images
  107  docker-compose images
  108  docker-compose ps
  109  docker-compose service
  110  docker-compose stop
  111  docker ps
  112  docker ps -a
  113  docker-compose start
  114  docker ps -a
  115  docker-compose  pause
  116  docker ps -a
  117  docker-compose  unpause
  118  docker ps -a
  119  docker-compose events
  120  ps
  121  kill -9 8291 8292
  122  ps
  123  docker-compose
  124  docker-compose events
  125  docker-compose events root_rechatge_1
  126  docker ps
  127  docker-compose logs
  128  docker volume ls
  129  docker-compose volume
  130  docker ps
  131  docker-compose down
  132  docker ps
  133  ll
  134  rm -rf Dockerfile file* index.html
  135  ll
  136  mv docker-compose.yml rahamcompose.yml
  137  ll
  138  docker-compose up -d
  139  docker-compose -f rahamcompose.yml up -d
  140  docker-compose -f rahamcompose.yml stop
  141  docker images
  142  docker tag payrecharge:v1 sathishkonanki228/repo1
  143  docker images
  144  docker push sathishkonanki228/repo1
  145  docker login
  146  docker push sathishkonanki228/repo1
  147  docker system df -v
  148  dockr images
  149  docker images
  150  docker tag paymovies:v1 sathishkonanki228/repo2
  151  docker images
  152  docker push sathishkonanki228/repo2
  153  docker images
  154  docker rmi -f jenkins/jenkins:lts
  155  docker images
  156  docker ps -a -q
  157  docker images -a -q
  158  docker rmi -f $(docker images -a -q)
  159  docker images
  160  dockerr pull sathishkonanki228/repo2:latest
  161  docker pull sathishkonanki228/repo2:latest
  162  docker images
  163  docker inspect sathishkonanki228/repo2

==================================================================================================

DAY-05:

HIGH AVAILABILITY - MORE THAN ONE SERVER
WHY - IF ONE SERVER GOD TERMINATED WE HAVE ANOTHER ONE FOR BACKUP
CLUSTER - GROUP OF SERVERS

DOCKER SWARM:
Its an orchestration too1.
it will have manager nodes and worker nodes.
to create multiple conatiners on multiple nodes.
in docker swarm image must be on dockerhub.

SETUP: CREATE 3 NODE WITH ALL TRAFFIC
yum install docker -y
systemctl start docker
systemctl status docker
docker version
hostnamectl set-hostname manager
hostnamectl set-hostname worker-1
hostnamectl set-hostname worker-2

GO TO MANAGER NODE:
docker swarm init --advertise-addr 172.31.25.115
copy the token to all servers

SERVICE: A feature of an application
REPLICA: Copy of a container

docker service create --name phoenpaymovies --replicas 6 --publish 81:80 rahamshaik/phonepaymovies:v1

docker swarm leave -- > workernode
docker node rm node-id
docker swarm join-token manager

DOCKER NETWORK:
docker network ls
docker network create raham
docker network inspect raham
docker network connect raham container-name/id
docker network disconnect raham container-name/id

HISTORY:

  2  docker swarm init --advertise-addr 172.31.25.115
    3  dockerr node ls
    4  docker node ls
    5  docker service create --name paytrain --replicas 3 --publish 80:80 rahamshaik/paytmmstrain:latest
    6  docker ps
    7  docker service create --name paymovies --replicas 6 --publish 81:80 rahamshaik/paytmmsmovies:latest
    8  docker ps
    9  docker service create --name paydth --replicas 6 --publish 82:80 rahamshaik/paytmmsdth:latest
   10  docker service ls
   11  docker service rm paymovies
   12  docker service rm paydth
   13  docker service ls
   14  docker service create --name phoenpaymovies --replicas 6 --publish 81:80 logo
   15  docker service create --name phoenpaymovies --replicas 6 --publish 81:80 rahamshaik/phonepaymovies:v1
   16  docker service rm phoenpaymovies
   17  docker service create --name phoenpaymovies --replicas 6 --publish 81:80 rahamshaik/phonepaymovies:v1
   18*
   19  docker service paytrain replicas=10
   20  docker service paytrain scale=10
   21  docker service paytrain scale replicas=10
   22  docker service paytrain scale --replicas=10
   23  docker service scale paytrain=10
   24  docker service ls
   25  docker p
   26  docker ps
   27  docker service scale paytrain=5
   28  docker ps
   29  docker service ls
   30  docker service ps paytrain
   31  docker ps
   32  docker stop 9181cb5718d4
   33  docker ps
   34  docker rm  9181cb5718d4
   35  docker ps
   36  docker service ls
   37  docker rm w5j1hosebnr4
   38  docker service rm w5j1hosebnr4
   39  docker service rm rhrp5dub26h8
   40  docker rm w5j1hosebnr4
   41  docker service ls
   42  docker ps -a
   43  docker node ls
   44  docker node rm 5unr34iolzh7e6dk1wtrl4xwi
   45  docker node stop 5unr34iolzh7e6dk1wtrl4xwi
   46  docker node ls
   47  docker node rm 5unr34iolzh7e6dk1wtrl4xwi
   48  docker node ls
   49  docker swarm join-token manager
   50  docker netwrok ls
   51  docker network ls
   52  docker network create raham
   53  docker network ls
   54  docker network inspect raham
   55  docker run -d --name cont1 rahamshaik/phonepaymovies:v1
   56  docker ps
   57  docker run -d --name cont2 rahamshaik/phonepaymovies:v1
   58  docker run -d --name cont3 rahamshaik/phonepaymovies:v1
   59  docker ps -a -q
   60  docker network attach d653f72264f5
   61  docker network connect d653f72264f5
   62  docker network connect raham d653f72264f5
   63  docker network inspect raham
   64  docker ps -a -q
   65  docker network connect raham 219aafd89d88
   66  docker ps -a -q
   67  docker network inspect raham
   68  docker network connect raham afe68c724c88
   69  docker network inspect raham
   70  docker network disconnect raham afe68c724c88
   71  docker network inspect raham
   72  docker network disconnect raham cont2
   73  docker network inspect raham
   74  history

=====================================================

DAY-06:

it is a container organizer, designed to make tasks easier, whether they are clustered or not. 
abel to connect multiple clusters, access the containers, migrate stacks between clusters
it is not a testing environment mainly used for production routines in large companies.
Portainer consists of two elements, the Portainer Server and the Portainer Agent. 
Both elements run as lightweight Docker containers on a Docker engine



Must have swarm mode and all ports enable with docker engine
curl -L https://downloads.portainer.io/ce2-16/portainer-agent-stack.yml -o portainer-agent-stack.yml
docker stack deploy -c portainer-agent-stack.yml portainer
 docker ps
public-ip of swamr master:9000


memory & cpu

docker run -itd --name cont5 --memory=250mb ubuntu
docker run -itd --name cont5 --cpus='0.5' ubuntu
